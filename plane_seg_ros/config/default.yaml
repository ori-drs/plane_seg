run_test_program: false
run_sequential_test: false
run_nth_cloud: false

input_topic: /rooster_elevation_mapping/elevation_map
erode_radius: 0.11
traversability_threshold: 0.7
verbose_timer: true
grid_map_sub_topic: /rooster_elevation_mapping/elevation_map
point_cloud_sub_topic: /plane_seg/point_cloud_in
pose_sub_topic: /state_estimator/pose_in_odom

grid_map_filters:

  - name: buffer_normalizer
    type: gridMapFilters/BufferNormalizerFilter

# # Duplicate layer.
# - name: duplicate
#   type: gridMapFilters/DuplicationFilter
#   params:
#     input_layer: ...
#     output_layer: ...

# Delete color layer.
  - name: delete_original_layers
    type: gridMapFilters/DeletionFilter
    params:
      layers: [color] # List of layers.

# Fill holes in the map with inpainting.
#  - name: inpaint
#    type: gridMapCv/InpaintFilter
#    params:
#      input_layer: elevation
#      output_layer: elevation_inpainted
#      radius: 0.05

# Reduce noise with a radial blurring filter.
#  - name: mean_in_radius
#    type: gridMapFilters/MeanInRadiusFilter
#    params:
#      input_layer: elevation_inpainted
#      output_layer: elevation_smooth
#      radius: 0.06

# Boxblur as an alternative to the inpaint and radial blurring filter above.
# - name: boxblur
#   type: gridMapFilters/SlidingWindowMathExpressionFilter
#   params:
#     input_layer: elevation
#     output_layer: elevation_smooth
#     expression: meanOfFinites(elevation)
#     compute_empty_cells: true
#     edge_handling: crop # options: inside, crop, empty, mean
#     window_size: 5 # optional

# Compute surface normals.
  - name: surface_normals
    type: gridMapFilters/NormalVectorsFilter
    params:
      input_layer: elevation
      output_layers_prefix: normal_vectors_
      radius: 0.05
      normal_vector_positive_axis: z
 
# Add a color layer for visualization based on the surface normal.
#  - name: normal_color_map
#    type: gridMapFilters/NormalColorMapFilter
#    params:
#      input_layers_prefix: normal_vectors_
#      output_layer: normal_color

# Compute slope from surface normal.
  - name: slope
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: slope
      expression: acos(normal_vectors_z)

